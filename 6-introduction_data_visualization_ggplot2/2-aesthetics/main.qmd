---
title: "Aesthetics"
author: "Kevin Perez Garcia"
format: html
toc: TRUE
editor: visual
---

Aesthetic mappings are the cornerstone of the grammar of graphics plotting concept. This is where the magic happens - converting continuous and categorical data into visual scales that provide access to a large amount of information in a very short time. In this chapter you’ll understand how to choose the best aesthetic mappings for your data.

```{r}
library(ggplot2)
data(mtcars)
fcyl <- factor(mtcars$cyl)
fam <- factor(mtcars$am)
```


# Visible aesthetics

## All about aesthetics: color, shape and size
In the video you saw 9 visible aesthetics. Let's apply them to a categorical variable — the cylinders in mtcars, cyl.

These are the aesthetics you can consider within aes() in this chapter: x, y, color, fill, size, alpha, labels and shape.

One common convention is that you don't name the x and y arguments to aes(), since they almost always come first, but you do name other arguments.

In the following exercise the fcyl column is categorical. It is cyl transformed into a factor.

```{r}
# Map x to mpg and y to fcyl
ggplot(mtcars, aes(mpg, fcyl)) +
  geom_point()
```

```{r}
# Swap mpg and fcyl
ggplot(mtcars, aes(fcyl, mpg)) +
  geom_point()
```

```{r}
# Map x to wt, y to mpg and color to fcyl
ggplot(mtcars, aes(wt, mpg, color=fcyl)) +
  geom_point()
```
```{r}
ggplot(mtcars, aes(wt, mpg, color = fcyl)) +
  # Set the shape and size of the points
  geom_point(shape=1, size=4)
```
## All about aesthetics: color vs. fill
Typically, the color aesthetic changes the outline of a geom and the fill aesthetic changes the inside. geom_point() is an exception: you use color (not fill) for the point color. However, some shapes have special behavior.

The default geom_point() uses shape = 19: a solid circle. An alternative is shape = 21: a circle that allow you to use both fill for the inside and color for the outline. This is lets you to map two aesthetics to each point.

All shape values are described on the [points()](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/points) help page.

fcyl and fam are the cyl and am columns converted to factors, respectively.
```{r}
fam <- factor(mtcars$am)
```
Change the aesthetics so that fcyl maps to fill rather than color.
```{r}
# Map fcyl to fill
ggplot(mtcars, aes(wt, mpg, fill = fcyl)) +
  geom_point(shape = 1, size = 4)
```
In geom_point() change the shape argument to 21 and add an alpha argument set to 0.6.
```{r}
ggplot(mtcars, aes(wt, mpg, fill = fcyl)) +
  # Change point shape; set alpha
  geom_point(shape = 21, size = 4, alpha = 0.6)
```
In the ggplot() aesthetics, map fam to color.
```{r}
# Map color to fam
ggplot(mtcars, aes(wt, mpg, fill = fcyl, color=fam)) +
  geom_point(shape = 21, size = 4, alpha = 0.6)
```

Notice that mapping a categorical variable onto fill doesn't change the colors, although a legend is generated! This is because the default shape for points only has a color attribute and not a fill attribute! Use fill when you have another shape (such as a bar), or when using a point that does have a fill and a color attribute, such as shape = 21, which is a circle with an outline. Any time you use a solid color, make sure to use alpha blending to account for over plotting.

## All about aesthetics: comparing aesthetics
Now that you've got some practice with using attributes, be careful of a major pitfall: these attributes can overwrite the aesthetics of your plot!

* Using mtcars, create a plot base layer, plt_mpg_vs_wt. Map mpg onto y and wt onto x.
```{r}
# Establish the base layer
plt_mpg_vs_wt <- ggplot(mtcars, aes(wt, mpg))
```

* Add a point layer, mapping the categorical no. of cylinders, fcyl, onto size.
```{r}
# Map fcyl to size
plt_mpg_vs_wt +
  geom_point(aes(size = fcyl))
```
Change the mapping. This time fcyl should be mapped onto alpha.
```{r}
# Map fcyl to alpha, not size
plt_mpg_vs_wt +
  geom_point(aes(alpha = fcyl))
```
Change the mapping again. This time fcyl should be mapped onto shape.
```{r}
# Map fcyl to shape, not alpha
plt_mpg_vs_wt +
  geom_point(aes(shape = fcyl))
```
Swap the geom layer: change points to text.
Change the mapping again. This time fcyl should be mapped onto label.
```{r}
# Use text layer and map fcyl to label
plt_mpg_vs_wt +
  geom_text(aes(label = fcyl))
```
:::{.callout-note}
Label and shape are only applicable to categorical data.
:::

# Using attributes

## All about attributes: color, shape, size and alpha
This time you'll use these arguments to set attributes of the plot, not map variables onto aesthetics.

You can specify colors in R using hex codes: a hash followed by two hexadecimal numbers each for red, green, and blue ("#RRGGBB"). Hexadecimal is base-16 counting. You have 0 to 9, and A representing 10 up to F representing 15. Pairs of hexadecimal numbers give you a range from 0 to 255. "#000000" is "black" (no color), "#FFFFFF" means "white", and `"#00FFFF" is cyan (mixed green and blue).

A hexadecimal color variable, my_blue has been defined for you.
```{r}
# A hexadecimal color
my_blue <- "#4ABEFF"
```
1. Set the point color to my_blue and the alpha to 0.6.
```{r}
ggplot(mtcars, aes(wt, mpg)) +
  # Set the point color and alpha
  geom_point(color=my_blue, alpha=0.6)
```
2. Change the color mapping to a fill mapping. That is, fcyl should be mapped onto fill. Set the color of the points to my_blue, point size to 10 and the point shape to 1.
```{r}
# Change the color mapping to a fill mapping
ggplot(mtcars, aes(wt, mpg, fill=fcyl)) +
  # Set point size and shape
  geom_point(color=my_blue, size=10, shape=1)
```
## All about attributes: conflicts with aesthetics
In the videos you saw that you can use all the aesthetics as attributes. Let's see how this works with the aesthetics you used in the previous exercises: x, y, color, fill, size, alpha, label and shape.

In this exercise you will set all kinds of attributes of the points!

You will continue to work with mtcars.

1. Add a point layer, setting alpha, the transparency, to 0.5.
```{r}
ggplot(mtcars, aes(wt, mpg, color=fcyl)) +
  # Add point layer with alpha 0.5
  geom_point(alpha=0.5)
```
2. Add a text layer, setting the label to the rownames of the dataset mtcars, and the color to "red".
```{r}
ggplot(mtcars, aes(wt, mpg, color = fcyl)) +
  # Add text layer with label rownames(mtcars) and color red
  geom_text(label=rownames(mtcars), color="red")
```
3. Add a point layer, setting the shape to 24 and the color to "yellow".
```{r}
ggplot(mtcars, aes(wt, mpg, color=fcyl)) +
  # Add points layer with shape 24 and color yellow
  geom_point(shape=24, color="yellow")
```
## Going all out
In this exercise, you will gradually add more aesthetics layers to the plot. You're still working with the mtcars dataset, but this time you're using more features of the cars. Each of the columns is described on the [mtcars](https://www.rdocumentation.org/packages/datasets/versions/3.6.2/topics/mtcars) help page. Columns fcyl and fam have been added (as before) as categorical versions of cyl and am respectively.

Notice that adding more aesthetic mappings to your plot is not always a good idea! You may just increase complexity and decrease readability.

1. Use mtcars to draw a plot of qsec vs. mpg, colored by fcyl. Add a point layer.
```{r}
# 3 aesthetics: qsec vs. mpg clored by fcyl
ggplot(mtcars, aes(mpg, qsec, color=fcyl)) +
  geom_point()
```
2. Add another aesthetic: map fam onto shape.
```{r}
# 4 aesthetics: add a mapping of shape to fam
ggplot(mtcars, aes(mpg, qsec, color=fcyl, shape = fam)) +
  geom_point()
```
3. Add another two aesthetics: map hp divided by wt onto size.
```{r}
# 5 aesthetics: add a mapping of size to hp/wt
ggplot(mtcars, aes(mpg, qsec, color = fcyl, shape = fam, size = hp / wt)) +
  geom_point()
```
:::{.callout-note}
Between the x and y dimensions, the color, shape, and size of the points, your plot displays five dimensions of the dataset!
:::

# Modifying aesthetics

## Updating aesthetic labels
In this exercise, you'll modify some aesthetics to make a bar plot of the number of cylinders for cars with different types of transmission.

You'll also make use of some functions for improving the appearance of the plot.

* `labs()` to set the x- and y-axis labels. It takes strings for each argument.
* `scale_fill_manual()` defines properties of the color scale (i.e. axis). The first argument sets the legend title. values is a named vector of colors to use.

1. Set the x-axis label to "Number of Cylinders", and the y-axis label to "Count" using the x and y arguments of labs(), respectively.
```{r}
ggplot(mtcars, aes(fcyl, fill = fam)) +
  geom_bar() +
  # Set the axis labels
  labs(x = "Number of cylinders", y = "Count")
```
2. Implement a custom fill color scale using scale_fill_manual(). Set the first argument to "Transmission", and values to palette.
```{r}
palette <- c(automatic = "#377EB8", manual = "#E41A1C")

# Set the position
ggplot(mtcars, aes(fcyl, fill = fam)) +
  geom_bar() +
  labs(x = "Number of Cylinders", y = "Count")
  # Set the fill color scale
  scale_fill_manual("Transmission", values = palette)
```
3. Modify the code to set the position to dodge so that the bars for transmissions are displayed side by side.
```{r}
palette <- c(automatic = "#377EB8", manual = "#E41A1C")

# Set the position
ggplot(mtcars, aes(fcyl, fill = fam)) +
  geom_bar(position = "dodge") +
  labs(x = "Number of Cylinders", y = "Count")
  scale_fill_manual("Transmission", values = palette)
```

## Setting a dummy aesthetic
In the last chapter you saw that all the visible aesthetics can serve as attributes and aesthetics, but I very conveniently left out x and y. That's because although you can make univariate plots (such as histograms, which you'll get to in the next chapter), a y-axis will always be provided, even if you didn't ask for it.

You can make univariate plots in ggplot2, but you will need to add a fake y axis by mapping y to zero.

When using setting y-axis limits, you can specify the limits as separate arguments, or as a single numeric vector. That is, ylim(lo, hi) or ylim(c(lo, hi)).

1. Using mtcars, plot 0 vs. mpg. Make a scatter plot and add "jitter" to it.
```{r}
# Plot 0 vs. mpg
ggplot(mtcars, aes(mpg, 0)) +
  geom_point(position = "jitter")
```
2. Use ylim() to set the limits on the y-axis from -2 to 2.
```{r}
ggplot(mtcars, aes(mpg, 0)) +
  geom_jitter() +
  # Set the y-axis limits
  ylim(-2,2)
```
# Aesthetics best practices

## Appropriate mappings
Incorrect aesthetic mapping causes confusion or misleads the audience.

Typically, the dependent variable is mapped onto the the y-axis and the independent variable is mapped onto the x-axis.